{"version":3,"sources":["../src/index.ts","../src/sdk.ts","../src/http.ts","../src/constants.ts"],"sourcesContent":["export * from \"./sdk\";\nexport * from \"./types\";\nexport { RestClient } from \"./http\";\nexport {\n  MEGAETH_TESTNET_CHAIN_CONFIG,\n  DEFAULT_SLIPPAGE_BPS,\n  MAX_UINT256,\n} from \"./constants\";\n","import {\n  Address,\n  Chain,\n  Hex,\n  PublicClient,\n  createPublicClient,\n  encodeFunctionData,\n  formatUnits,\n  http,\n  parseUnits,\n} from \"viem\";\n\nimport { RestClient } from \"./http\";\nimport {\n  BuildApproveParams,\n  BuildSwapExactInResult,\n  ChainConfig,\n  GetMarketsParams,\n  MarketSummary,\n  PreparedTransaction,\n  QuoteRequest,\n  QuoteResult,\n  RestClientOptions,\n  SwapExactInParams,\n} from \"./types\";\nimport {\n  DEFAULT_SLIPPAGE_BPS,\n  ERC20_ABI,\n  GTE_ROUTER_MIN_ABI,\n  MAX_UINT256,\n  MEGAETH_TESTNET_CHAIN_CONFIG,\n  UNISWAP_V2_ROUTER_ABI,\n} from \"./constants\";\n\nexport interface GteSdkOptions {\n  chainConfig?: ChainConfig;\n  restOptions?: RestClientOptions;\n  rpcUrl?: string;\n  publicClient?: PublicClient;\n  uniswapRouterAddress?: Address;\n}\n\ninterface QuoteContext extends QuoteRequest {\n  slippageBps: number;\n}\n\nexport class GteSdk {\n  private readonly chain: ChainConfig;\n  private readonly rest: RestClient;\n  private readonly rpcUrl: string;\n  private readonly customUniswapRouter?: Address;\n  private publicClient: PublicClient;\n  private cachedUniswapRouter?: Address;\n\n  constructor(options: GteSdkOptions = {}) {\n    this.chain = options.chainConfig ?? MEGAETH_TESTNET_CHAIN_CONFIG;\n    this.rpcUrl = options.rpcUrl ?? this.chain.rpcHttpUrl;\n    this.rest = new RestClient({\n      baseUrl: options.restOptions?.baseUrl ?? this.chain.apiUrl,\n      ...options.restOptions,\n    });\n    this.publicClient =\n      options.publicClient ??\n      createPublicClient({ chain: toViemChain(this.chain, this.rpcUrl), transport: http(this.rpcUrl) });\n    this.customUniswapRouter = options.uniswapRouterAddress;\n  }\n\n  getChainConfig(): ChainConfig {\n    return {\n      ...this.chain,\n      eip1559: { ...this.chain.eip1559 },\n    };\n  }\n\n  async getMarkets(params: GetMarketsParams = {}): Promise<MarketSummary[]> {\n    const query = {\n      limit: params.limit,\n      offset: params.offset,\n      marketType: params.marketType,\n      sortBy: params.sortBy,\n      tokenAddress: params.tokenAddress,\n      newlyGraduated: params.newlyGraduated,\n    };\n    const response = await this.rest.get<MarketSummary[]>(\"/markets\", query);\n    return response;\n  }\n\n  async getQuote(request: QuoteRequest): Promise<QuoteResult> {\n    const slippageBps = request.slippageBps ?? DEFAULT_SLIPPAGE_BPS;\n    const ctx: QuoteContext = { ...request, slippageBps };\n    const path = ctx.path ?? [ctx.tokenIn.address, ctx.tokenOut.address];\n    if (path.length < 2) {\n      throw new Error(\"Quote path must include at least tokenIn and tokenOut\");\n    }\n    const amountInAtomic = this.toAtomic(ctx.amountIn, ctx.tokenIn.decimals);\n    const router = await this.getUniswapRouterAddress();\n    const amountsOut = await this.publicClient.readContract({\n      address: router,\n      abi: UNISWAP_V2_ROUTER_ABI,\n      functionName: \"getAmountsOut\",\n      args: [amountInAtomic, path],\n    });\n    const expectedAmountOutAtomic = amountsOut[amountsOut.length - 1];\n    const expectedAmountOut = formatUnits(expectedAmountOutAtomic, ctx.tokenOut.decimals);\n    const minAmountOutAtomic =\n      (expectedAmountOutAtomic * BigInt(10_000 - slippageBps)) / 10_000n;\n    const minAmountOut = formatUnits(minAmountOutAtomic, ctx.tokenOut.decimals);\n    const inputFloat = parseFloat(this.toDecimalString(ctx.amountIn));\n    const price =\n      inputFloat > 0 ? parseFloat(expectedAmountOut) / inputFloat : 0;\n\n    return {\n      amountIn: this.toDecimalString(ctx.amountIn),\n      amountInAtomic,\n      expectedAmountOut,\n      expectedAmountOutAtomic,\n      minAmountOut,\n      minAmountOutAtomic,\n      price: Number.isFinite(price) ? price.toString() : \"0\",\n      slippageBps,\n      path,\n    };\n  }\n\n  async buildApprove(params: BuildApproveParams): Promise<PreparedTransaction> {\n    const spender = params.spender ?? (await this.getUniswapRouterAddress());\n    const amountAtomic = this.resolveApprovalAmount(params);\n    const data = encodeFunctionData({\n      abi: ERC20_ABI,\n      functionName: \"approve\",\n      args: [spender, amountAtomic],\n    });\n\n    return {\n      to: params.tokenAddress,\n      data,\n      value: 0n,\n      chainId: this.chain.id,\n    };\n  }\n\n  async buildSwapExactIn(params: SwapExactInParams): Promise<BuildSwapExactInResult> {\n    const quote = params.quote ?? (await this.getQuote(params));\n    const router = await this.getUniswapRouterAddress();\n    const deadlineSeconds = params.deadlineSeconds ?? 20 * 60;\n    const deadline = Math.floor(Date.now() / 1000) + deadlineSeconds;\n    const data = this.encodeSwapCalldata({\n      quote,\n      recipient: params.recipient,\n      deadline,\n      useNativeIn: params.useNativeIn ?? false,\n      useNativeOut: params.useNativeOut ?? false,\n      wethAddress: this.chain.wethAddress,\n    });\n\n    const value = params.useNativeIn ? quote.amountInAtomic : 0n;\n\n    return {\n      tx: {\n        to: router,\n        data,\n        value,\n        chainId: this.chain.id,\n      },\n      quote,\n      deadline,\n    };\n  }\n\n  private resolveApprovalAmount(params: BuildApproveParams): bigint {\n    if (params.amount === undefined) {\n      return MAX_UINT256;\n    }\n    if (typeof params.amount === \"bigint\") {\n      return params.amount;\n    }\n    if (params.decimals === undefined) {\n      return BigInt(params.amount.toString());\n    }\n    return parseUnits(this.toDecimalString(params.amount), params.decimals);\n  }\n\n  private toAtomic(amount: string | number | bigint, decimals: number): bigint {\n    if (typeof amount === \"bigint\") {\n      return amount;\n    }\n    return parseUnits(this.toDecimalString(amount), decimals);\n  }\n\n  private toDecimalString(amount: string | number | bigint): string {\n    if (typeof amount === \"string\") return amount;\n    return amount.toString();\n  }\n\n  private async getUniswapRouterAddress(): Promise<Address> {\n    if (this.customUniswapRouter) {\n      return this.customUniswapRouter;\n    }\n    if (this.cachedUniswapRouter) {\n      return this.cachedUniswapRouter;\n    }\n    const router = await this.publicClient.readContract({\n      address: this.chain.routerAddress,\n      abi: GTE_ROUTER_MIN_ABI,\n      functionName: \"uniV2Router\",\n      args: [],\n    });\n    this.cachedUniswapRouter = router as Address;\n    return router as Address;\n  }\n\n  private encodeSwapCalldata(args: {\n    quote: QuoteResult;\n    recipient: Address;\n    deadline: number;\n    useNativeIn: boolean;\n    useNativeOut: boolean;\n    wethAddress: Address;\n  }): Hex {\n    const deadlineBigInt = BigInt(args.deadline);\n    if (args.useNativeIn && args.useNativeOut) {\n      throw new Error(\"Cannot use native token for both input and output\");\n    }\n    if (args.useNativeIn && args.quote.path[0]?.toLowerCase() !== args.wethAddress.toLowerCase()) {\n      throw new Error(\"Native input swaps must start the path with the wrapped native token\");\n    }\n    const lastHop = args.quote.path[args.quote.path.length - 1];\n    if (args.useNativeOut && lastHop?.toLowerCase() !== args.wethAddress.toLowerCase()) {\n      throw new Error(\"Native output swaps must end the path with the wrapped native token\");\n    }\n    if (args.useNativeIn) {\n      return encodeFunctionData({\n        abi: UNISWAP_V2_ROUTER_ABI,\n        functionName: \"swapExactETHForTokens\",\n        args: [args.quote.minAmountOutAtomic, args.quote.path, args.recipient, deadlineBigInt],\n      });\n    }\n    if (args.useNativeOut) {\n      return encodeFunctionData({\n        abi: UNISWAP_V2_ROUTER_ABI,\n        functionName: \"swapExactTokensForETH\",\n        args: [\n          args.quote.amountInAtomic,\n          args.quote.minAmountOutAtomic,\n          args.quote.path,\n          args.recipient,\n          deadlineBigInt,\n        ],\n      });\n    }\n    return encodeFunctionData({\n      abi: UNISWAP_V2_ROUTER_ABI,\n      functionName: \"swapExactTokensForTokens\",\n      args: [\n        args.quote.amountInAtomic,\n        args.quote.minAmountOutAtomic,\n        args.quote.path,\n        args.recipient,\n        deadlineBigInt,\n      ],\n    });\n  }\n}\n\nfunction toViemChain(config: ChainConfig, rpcUrl: string): Chain {\n  return {\n    id: config.id,\n    name: config.name,\n    nativeCurrency: { name: config.nativeSymbol, symbol: config.nativeSymbol, decimals: 18 },\n    rpcUrls: {\n      default: { http: [rpcUrl] },\n      public: { http: [rpcUrl] },\n    },\n  } as Chain;\n}\n","import { RestClientOptions } from \"./types\";\n\ninterface RequestOptions {\n  query?: Record<string, string | number | boolean | undefined>;\n  body?: unknown;\n  signal?: AbortSignal;\n}\n\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n\nexport class RestClient {\n  private readonly baseUrl: string;\n  private readonly fetchImpl: typeof fetch;\n  private readonly maxRetries: number;\n  private readonly retryDelayMs: number;\n  private readonly rateLimitMs: number;\n  private readonly headers: Record<string, string>;\n  private lastRequestAt = 0;\n\n  constructor(options: RestClientOptions = {}) {\n    this.baseUrl = (options.baseUrl ?? \"https://api-testnet.gte.xyz/v1\").replace(/\\/$/, \"\");\n    this.fetchImpl = options.fetchImpl ?? globalThis.fetch;\n    if (!this.fetchImpl) {\n      throw new Error(\"A fetch implementation must be provided in non-browser environments\");\n    }\n    this.maxRetries = options.maxRetries ?? 3;\n    this.retryDelayMs = options.retryDelayMs ?? 500;\n    this.rateLimitMs = options.rateLimitMs ?? 0;\n    this.headers = { \"Content-Type\": \"application/json\", ...(options.headers ?? {}) };\n  }\n\n  private async rateLimit() {\n    if (!this.rateLimitMs) return;\n    const now = Date.now();\n    const elapsed = now - this.lastRequestAt;\n    if (elapsed < this.rateLimitMs) {\n      await sleep(this.rateLimitMs - elapsed);\n    }\n    this.lastRequestAt = Date.now();\n  }\n\n  private buildUrl(path: string, query?: Record<string, string | number | boolean | undefined>) {\n    const url = new URL(`${this.baseUrl}/${path.replace(/^\\//, \"\")}`);\n    if (query) {\n      Object.entries(query).forEach(([key, value]) => {\n        if (value === undefined || value === null) return;\n        url.searchParams.append(key, String(value));\n      });\n    }\n    return url.toString();\n  }\n\n  private async request<T>(method: string, path: string, options: RequestOptions = {}): Promise<T> {\n    await this.rateLimit();\n    let attempt = 0;\n    let lastError: unknown;\n\n    while (attempt <= this.maxRetries) {\n      try {\n        const response = await this.fetchImpl(this.buildUrl(path, options.query), {\n          method,\n          body: options.body ? JSON.stringify(options.body) : undefined,\n          headers: this.headers,\n          signal: options.signal,\n        });\n\n        if (!response.ok) {\n          const errorPayload = await safeJson(response);\n          throw new Error(\n            `GTE API ${method} ${path} failed with ${response.status}: ${JSON.stringify(errorPayload)}`,\n          );\n        }\n\n        if (response.status === 204) {\n          return undefined as T;\n        }\n        return (await safeJson(response)) as T;\n      } catch (error) {\n        lastError = error;\n        attempt += 1;\n        if (attempt > this.maxRetries) {\n          throw error;\n        }\n        await sleep(this.retryDelayMs * attempt);\n      }\n    }\n    throw lastError instanceof Error ? lastError : new Error(\"Unknown request failure\");\n  }\n\n  get<T>(path: string, query?: RequestOptions[\"query\"], signal?: AbortSignal) {\n    return this.request<T>(\"GET\", path, { query, signal });\n  }\n}\n\nasync function safeJson(response: Response) {\n  const text = await response.text();\n  if (!text) return undefined;\n  try {\n    return JSON.parse(text);\n  } catch (error) {\n    throw new Error(`Failed to parse JSON: ${(error as Error).message}`);\n  }\n}\n","import type { Address } from \"viem\";\nimport type { ChainConfig } from \"./types\";\n\nexport const DEFAULT_SLIPPAGE_BPS = 50; // 0.50%\nexport const MAX_UINT256 = (1n << 256n) - 1n;\n\nexport const MEGAETH_TESTNET_CHAIN_CONFIG: ChainConfig = {\n  id: 6342,\n  name: \"MegaETH Testnet\",\n  apiUrl: \"https://api-testnet.gte.xyz/v1\",\n  wsUrl: \"wss://api-testnet.gte.xyz/ws\",\n  rpcHttpUrl: \"https://api-testnet.gte.xyz/v1/exchange\",\n  rpcWsUrl: \"wss://carrot.megaeth.com/ws\",\n  routerAddress: \"0x86470efcEa37e50F94E74649463b737C87ada367\" as Address,\n  wethAddress: \"0x776401b9BC8aAe31A685731B7147D4445fD9FB19\" as Address,\n  clobManagerAddress: \"0xD7310f8A0D569Dd0803D28BB29f4E0A471fA84F6\" as Address,\n  launchpadAddress: \"0x0B6cD1DefCe3189Df60A210326E315383fbC14Ed\" as Address,\n  explorerUrl: \"https://megaexplorer.xyz\",\n  performanceDashboardUrl: \"https://uptime.megaeth.com\",\n  nativeSymbol: \"ETH\",\n  eip1559: {\n    baseFeeGwei: 0.0025,\n    maxBlockGas: 2_000_000_000,\n    targetBlockGas: 1_000_000_000,\n  },\n};\n\nexport const ERC20_ABI = [\n  {\n    type: \"function\",\n    name: \"approve\",\n    stateMutability: \"nonpayable\",\n    inputs: [\n      { name: \"spender\", type: \"address\" },\n      { name: \"amount\", type: \"uint256\" },\n    ],\n    outputs: [{ name: \"\", type: \"bool\" }],\n  },\n  {\n    type: \"function\",\n    name: \"decimals\",\n    stateMutability: \"view\",\n    inputs: [],\n    outputs: [{ name: \"\", type: \"uint8\" }],\n  },\n  {\n    type: \"function\",\n    name: \"symbol\",\n    stateMutability: \"view\",\n    inputs: [],\n    outputs: [{ name: \"\", type: \"string\" }],\n  },\n];\n\nexport const UNISWAP_V2_ROUTER_ABI = [\n  {\n    type: \"function\",\n    name: \"getAmountsOut\",\n    stateMutability: \"view\",\n    inputs: [\n      { name: \"amountIn\", type: \"uint256\" },\n      { name: \"path\", type: \"address[]\" },\n    ],\n    outputs: [{ name: \"amounts\", type: \"uint256[]\" }],\n  },\n  {\n    type: \"function\",\n    name: \"getAmountsIn\",\n    stateMutability: \"view\",\n    inputs: [\n      { name: \"amountOut\", type: \"uint256\" },\n      { name: \"path\", type: \"address[]\" },\n    ],\n    outputs: [{ name: \"amounts\", type: \"uint256[]\" }],\n  },\n  {\n    type: \"function\",\n    name: \"swapExactTokensForTokens\",\n    stateMutability: \"nonpayable\",\n    inputs: [\n      { name: \"amountIn\", type: \"uint256\" },\n      { name: \"amountOutMin\", type: \"uint256\" },\n      { name: \"path\", type: \"address[]\" },\n      { name: \"to\", type: \"address\" },\n      { name: \"deadline\", type: \"uint256\" },\n    ],\n    outputs: [{ name: \"amounts\", type: \"uint256[]\" }],\n  },\n  {\n    type: \"function\",\n    name: \"swapExactTokensForETH\",\n    stateMutability: \"nonpayable\",\n    inputs: [\n      { name: \"amountIn\", type: \"uint256\" },\n      { name: \"amountOutMin\", type: \"uint256\" },\n      { name: \"path\", type: \"address[]\" },\n      { name: \"to\", type: \"address\" },\n      { name: \"deadline\", type: \"uint256\" },\n    ],\n    outputs: [{ name: \"amounts\", type: \"uint256[]\" }],\n  },\n  {\n    type: \"function\",\n    name: \"swapExactETHForTokens\",\n    stateMutability: \"payable\",\n    inputs: [\n      { name: \"amountOutMin\", type: \"uint256\" },\n      { name: \"path\", type: \"address[]\" },\n      { name: \"to\", type: \"address\" },\n      { name: \"deadline\", type: \"uint256\" },\n    ],\n    outputs: [{ name: \"amounts\", type: \"uint256[]\" }],\n  },\n];\n\nexport const GTE_ROUTER_MIN_ABI = [\n  {\n    type: \"function\",\n    name: \"uniV2Router\",\n    stateMutability: \"view\",\n    inputs: [],\n    outputs: [{ name: \"router\", type: \"address\" }],\n  },\n  {\n    type: \"function\",\n    name: \"weth\",\n    stateMutability: \"view\",\n    inputs: [],\n    outputs: [{ name: \"token\", type: \"address\" }],\n  },\n];\n"],"mappings":"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","names":[]}